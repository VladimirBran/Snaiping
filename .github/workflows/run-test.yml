name: Daily Java Tests with Allure

on:
  schedule:
    - cron: '0 5 * * *' # 8:00 –ø–æ –ú–°–ö
  workflow_dispatch: # —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
    inputs:
      testClass:
        description: '–ù–∞–±–æ—Ä smoke —Ç–µ—Å—Ç–æ–≤'
        default: 'SmokeSuite'
        required: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout (–ø—Ä–æ–≤–µ—Ä–∫–∞)
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Set up JDK 11 (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # 3Ô∏è‚É£ Cache Maven dependencies (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 4Ô∏è‚É£ Run tests with Allure (–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å Allure)
      - name: Run only SmokeSuite
        run: mvn clean test -Dtest=${{ github.event.inputs.testClass}} io.qameta.allure:allure-maven:report

      # 5Ô∏è‚É£ Upload Allure report as artifact (–∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞)
      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: target/site/allure-maven-plugin

#      # üì¶ –°–±–æ—Ä–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á—ë—Ç–∞
#      - name: Run tests and generate Allure report
#        run: |
#          mvn clean test
#          mvn allure:report
#
#      # üìë –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º wkhtmltopdf –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ HTML ‚Üí PDF
#      - name: Install wkhtmltopdf
#        run: sudo apt-get install -y wkhtmltopdf
#
#      # üìÉ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Allure report –≤ PDF
#      - name: Convert Allure report to PDF
#        run: |
#          mkdir -p pdf-report
#          wkhtmltopdf target/site/allure-maven-plugin/index.html pdf-report/allure-report.pdf
#
#      # üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –≤ Telegram
#      - name: Send Allure PDF to Telegram
#        env:
#          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
#          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
#        run: |
#          curl -F document=@pdf-report/allure-report.pdf \
#          "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" \
#          -F chat_id="${TELEGRAM_CHAT_ID}" \
#          -F caption="üìä Allure Report PDF"


      # 6Ô∏è‚É£ Notify Telegram with test status and link to artifact (–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ –¢–ì)
      - name: Notify Telegram
        if: always() # ‚úÖ –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        run: |
          STATUS="${{ job.status }}"
          ARTIFACT_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          MESSAGE="*JUnit Tests Result*: *${STATUS}*\n\
          üìÑ Suite: AllTestsSuite\n\
          [üîó View Allure Report Artifact](${ARTIFACT_URL})"
          echo "Sending Telegram notification..."
          RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d parse_mode=Markdown \
            -d text="$MESSAGE")
          echo "$RESPONSE"
